Included Files:
	*util.py
	*Readme

Accessories: None

Wiring instructions: functions read_tree(), decode_byte(), write_tree(), compress(), and decompress()

Notes and Assumptions:	
	
	The util.py contain 5 functions. All the functions are using the try and except to aviod error and then exit.

	Firstly, read_tree() is the function to read the tree form and return the tree root.

	Secondly, decode_byte() is the function to read bits one by one, which means that branch(would not be read the value) - leaf(read the 
	value). Using the bitio.readbit to read the bit, 0 means the left child, 1 means the right child in binary. The return value is next 
	byte of the compressed bit stream.

	Thirdly, decompress() is the function to decompress. In here, the BitReader and BitWriter are used to read the bits and write the bits.
	If the bit is not None, write the bits as count 8, else to finish the loop.

	Fourthly, write_tree() is the function to write the tree using the pickle module.

	Fifthly, compress() is the function to compress the file. Using the make_encoding_table function in huffman to make the encoding table.
	And then make a list and use for loop to get 8 binary number in list. Use the index to find the corresponding value in encoding table
	and write it in to the file. In the end, finishing with encoding none and push one byte with EOF flag.

	Assumption: To run the decompress function use the 'python3 ../webserver.py' in ternimal and open the url "http://localhost:8000" in 
	webpage to check the image is whether successfully decompress it or not. If it's successful, then you could see David huffman's image.

	To run the compress function, add some new file in to wwroot/ and write 'python3 ../compress.py somefile.ext' in to ternimal, the 
	somefile.ext.huf will appear. Then use the decompress function and go to the url "http://localhost:8000/somefile.ext" would see the
	same file which are compressed.

